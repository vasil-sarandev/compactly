services:
  api:
    image: api-dev
    build:
      context: .
      target: dev
      dockerfile: apps/api/Dockerfile
    volumes:
      - ./apps/api:/usr/src/app/apps/api  # Mount app source directory inside container so HMR works
    ports:
      - '3000:3000'
    depends_on:
      kafka:
          condition: service_healthy
      mongo:
          condition: service_started
      redis:
          condition: service_started
    networks:
      - internal-net
  analytics:
    image: analytics-dev
    build:
      context: .
      target: dev
      dockerfile: apps/analytics/Dockerfile
    volumes:
      - ./apps/analytics:/usr/src/app/apps/analytics  # Mount app source directory inside container so HMR works
    depends_on:
      kafka:
          condition: service_healthy
      mongo:
          condition: service_started
      redis:
          condition: service_started
    networks:
      - internal-net
  pool-manager:
    image: pool-manager-dev
    build:
      context: .
      target: dev
      dockerfile: apps/pool-manager/Dockerfile
    volumes:
      - ./apps/pool-manager:/usr/src/app/apps/pool-manager  # Mount app source directory inside container so HMR works
    depends_on:
      kafka:
          condition: service_healthy
      mongo:
          condition: service_started
      redis:
          condition: service_started
    networks:
      - internal-net
  mongo:
    image: mongo:8.0.12
    volumes:
      - ./scripts/mongo-entrypoint.sh:/usr/local/bin/mongo-entrypoint.sh # mount the mongo entrypoint script
      - ./scripts/mongo-database-seed.js:/usr/local/bin/mongo-database-seed.js # mount the mongo database seed script
      - mongo-data:/data/db   # Persist mongo data to named volume
    networks:
      - internal-net
    entrypoint: "/usr/local/bin/mongo-entrypoint.sh"
  redis:
    image: redis:8.0.3
    volumes:
      - redis-data:/data   # Persist redis data to named volume
    networks:
      - internal-net
  kafka:
    image: confluentinc/cp-kafka:8.0.0
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "test-cluster-id"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - internal-net

volumes:
  mongo-data:
  redis-data:

networks:
  internal-net:
    driver: bridge